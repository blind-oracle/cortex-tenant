{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "A helm chart for cortex-tenant",
  "description": "Prometheus remote write proxy which marks timeseries with a Cortex/Mimir tenant ID based on labels.",
  "type": "object",
  "required": [
    "config"
  ],
  "properties": {
    "nameOverride": {
      "type": [
        "string",
        "null"
      ],
      "title": "Name override",
      "description": "Overrides the chart name"
    },
    "fullnameOverride": {
      "type": [
        "string",
        "null"
      ],
      "title": "Fullname override",
      "description": "Overrides the fullname of the chart"
    },
    "image": {
      "type": "object",
      "title": "Image",
      "properties": {
        "repository": {
          "type": "string",
          "title": "Repository",
          "description": "Image repository"
        },
        "pullPolicy": {
          "type": "string",
          "title": "Pull policy",
          "description": "Image pull policy",
          "enum": [
            "Always",
            "Never",
            "IfNotPresent"
          ]
        },
        "tag": {
          "type": "string",
          "title": "Tag",
          "description": "Image tag"
        }
      }
    },
    "service": {
      "type": "object",
      "title": "Service",
      "additionalProperties": false,
      "properties": {
        "type": {
          "type": "string",
          "title": "Type",
          "description": "Service type",
          "enum": [
            "ClusterIP",
            "NodePort",
            "LoadBalancer"
          ]
        },

        "annotations": {
        "type": "object",
        "title": "Annotations",
        "description": "Annotations for the service"
        },
        "port": {
          "type": "integer",
          "title": "Port",
          "description": "Service port",
          "default": 8080
        },
        "targetPort": {
          "type": "integer",
          "title": "Target port",
          "description": "Service target port",
          "default": 8080
        }
      }
    },
    "replicas": {
      "type": "integer",
      "title": "Replicas",
      "description": "Number of replicas",
      "default": 1
    },
    "autoscaling": {
      "type": "object",
      "title": "Autoscaling",
      "additionalProperties": false,
      "properties": {
        "enabled": {
          "type": "boolean",
          "title": "Enabled",
          "description": "Enable autoscaling"
        },
        "minReplica": {
          "type": "integer",
          "title": "Min replicas",
          "description": "Minimum number of replicas",
          "default": 1
        },
        "maxReplica": {
          "type": "integer",
          "title": "Max replicas",
          "description": "Maximum number of replicas",
          "default": 3
        },
        "targetCPUUtilizationPercentage": {
          "type": "integer",
          "title": "Target CPU utilization percentage",
          "description": "Target CPU utilization percentage",
          "default": 60
        },
        "targetMemoryUtilizationPercentage": {
          "type": "integer",
          "title": "Target memory utilization percentage",
          "description": "Target memory utilization percentage",
          "default": 60
        }
      }
    },
    "envs": {
      "type": "array",
      "title": "Envs",
      "description": "Environment variables",
      "items": {
        "type": "object",
        "title": "Env",
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Environment variable name"
          },
          "value": {
            "type": [
              "string",
              "integer",
              "boolean"
            ],
            "title": "Value",
            "description": "Environment variable value"
          }
        }
      }
    },
    "config": {
      "type": "object",
      "title": "Config",
      "description": "Configuration for the cortex-tenant",
      "additionalProperties": false,
      "properties": {
        "listen": {
          "type": "string",
          "title": "Listen",
          "description": "Where to listen for incoming write requests from Prometheus"
        },
        "listen_pprof": {
          "type": "string",
          "title": "Listen Profiling API",
          "description": "Profiling API, leave empty to disable"
        },
        "target": {
          "type": "string",
          "title": "Target URL",
          "description": "Where to send the modified requests (Cortex)",
          "format": "uri"
        },
        "enable_ipv6": {
          "type": "boolean",
          "title": "Enable IPv6",
          "description": "Whether to enable querying for IPv6 records"
        },
        "log_level": {
          "type": "string",
          "title": "Log level",
          "enum": [
            "debug",
            "info",
            "warn",
            "error"
          ],
          "default": "warn"
        },
        "timeout": {
          "type": "string",
          "title": "Timeout",
          "description": "HTTP request timeout",
          "format": "duration"
        },
        "timeout_shutdown": {
          "type": "string",
          "title": "Shutdown timeout",
          "description": "Timeout to wait on shutdown to allow load balancers detect that we're going away",
          "format": "duration"
        },
        "concurrency": {
          "type": "integer",
          "title": "Concurrency",
          "description": "Max number of parallel incoming HTTP requests to handle",
          "default": 1000
        },
        "metadata": {
          "type": "boolean",
          "title": "Metadata",
          "description": "Whether to forward metrics metadata from Prometheus to Cortex"
        },
        "log_response_errors": {
          "type": "boolean",
          "title": "Log response errors",
          "description": "If true response codes from metrics backend will be logged to stdout"
        },
        "max_connection_duration": {
          "type": "string",
          "title": "Max Connection Duration",
          "description": "Maximum duration to keep outgoing connections alive (to Cortex/Mimir)",
          "format": "duration"
        },
        "max_conns_per_host": {
          "type": "integer",
          "title": "Max Connection per host",
          "description": "Maximum number of outgoing concurrent connections to Cortex / Mimir",
          "default": 64
        },
        "auth": {
          "type": "object",
          "title": "Authentication",
          "properties": {
            "enabled": {
              "type": "boolean",
              "title": "Enabled",
              "description": "Egress HTTP basic auth -> add `Authentication` header to outgoing requests",
              "default": false
            },
            "username": {
              "type": [
                "string",
                "null"
              ],
              "title": "Username",
              "description": "Username"
            },
            "password": {
              "type": [
                "string",
                "null"
              ],
              "title": "Password",
              "description": "Password"
            },
            "existingSecret": {
              "type": [
                "string",
                "null"
              ],
              "title": "Existing Secret",
              "description": "Secret should pass the `CT_AUTH_EGRESS_USERNAME` and `CT_AUTH_EGRESS_PASSWORD` env variables"
            }
          }
        },
        "tenant": {
          "type": "object",
          "title": "Tenant configuration",
          "properties": {
            "label": {
              "type": "string",
              "title": "Label",
              "description": "Which label to look for the tenant information",
              "default": "tenant"
            },
            "label_list": {
              "type": "array",
              "title": "LabelList",
              "description": "List of labels examined for tenant information. If set takes precedent over `label`",
              "items": {
                "type": "string",
                "title": "LabelListItems",
                "default": ""
              }
            },
            "prefix": {
              "type": "string",
              "title": "Prefix",
              "description": "Optional hard-coded prefix with delimeter for all tenant values"
            },
            "prefix_prefer_source": {
              "type": "boolean",
              "title": "Prefix Prefer Source",
              "description": "If true will use the tenant ID of the inbound request as the prefix of the new tenant id.",
              "default": false
            },
            "label_remove": {
              "type": "boolean",
              "title": "Label Remove",
              "description": "Whether to remove the tenant label from the request",
              "default": false
            },
            "header": {
              "type": "string",
              "title": "Header",
              "description": "To which header to add the tenant ID",
              "default": "X-Scope-OrgID"
            },
            "default": {
              "type": "string",
              "title": "Default",
              "description": "Which tenant ID to use if the label is missing in any of the timeseries",
              "default": "cortex-tenant-default"
            },
            "accept_all": {
              "type": "boolean",
              "title": "Accept All",
              "description": "Enable if you want all metrics from Prometheus to be accepted with a 204 HTTP code",
              "default": false
            }
          }
        }
      }
    },
    "resources": {
      "type": "object",
      "title": "Resources",
      "description": "Resource limits and requests",
      "properties": {
        "limits": {
          "type": "object",
          "title": "Limits",
          "description": "Resource limits",
          "properties": {
            "memory": {
              "type": [
                "string",
                "integer",
                "null"
              ],
              "title": "Memory",
              "description": "Maximum memory limit"
            },
            "cpu": {
              "type": [
                "string",
                "integer",
                "null"
              ],
              "title": "CPU",
              "description": "Maximum CPU limit"
            }
          }
        },
        "requests": {
          "type": "object",
          "title": "Requests",
          "description": "Resource requests",
          "properties": {
            "cpu": {
              "type": [
                "string",
                "integer",
                "null"
              ],
              "title": "CPU",
              "description": "CPU request"
            },
            "memory": {
              "type": [
                "string",
                "integer",
                "null"
              ],
              "title": "Memory",
              "description": "Memory request"
            }
          }
        }
      }
    },
    "podDisruptionBudget": {
      "type": "object",
      "title": "Pod Disruption Budget",
      "properties": {
        "enabled": {
          "type": "boolean",
          "title": "Enabled",
          "description": "Whether pod disruption budget is enabled"
        },
        "minAvailable": {
          "type": [
            "integer",
            "string"
          ],
          "title": "Minimum Available",
          "description": "Minimum number of available pods during disruption. Also may be a percentage"
        },
        "maxUnavailable": {
          "type": [
            "integer",
            "string"
          ],
          "title": "Maximum Unavailable",
          "description": "Maximum number of unavailable pods during disruption. Also may be a percentage"
        }
      }
    },
    "annotations": {
      "type": "object",
      "title": "Annotations",
      "description": "Annotations for the deployment"
    },
    "podAnnotations": {
      "type": "object",
      "title": "Pod Annotations",
      "description": "Annotations for the pods"
    },
    "podSecurityContext": {
      "type": "object",
      "title": "Pod Security Context",
      "description": "Security context for the pods"
    },
    "securityContext": {
      "type": "object",
      "title": "Security Context",
      "description": "Security context"
    },
    "nodeSelector": {
      "type": "object",
      "title": "Node Selector"
    },
    "tolerations": {
      "type": "array",
      "title": "Tolerations"
    },
    "affinity": {
      "type": "object",
      "title": "Affinity"
    },
    "podTopologySpreadConstraints": {
      "type": "array",
      "title": "Pod Topology Spread Constraints"
    },
    "serviceMonitor": {
      "type": "object",
      "title": "Service Monitor",
      "description": "Service monitor",
      "properties": {
        "enabled": {
          "type": "boolean",
          "title": "Enabled",
          "description": "Whether service monitor is enabled",
          "default": false
        },
        "namespace": {
          "type": [
            "string",
            "null"
          ],
          "title": "Namespace",
          "description": "Alternative namespace for ServiceMonitor resources"
        },
        "targetPort": {
          "type": "integer",
          "title": "Target Port",
          "description": "Service targetPort",
          "default": 9090
        },
        "namespaceSelector": {
          "type": "object",
          "title": "Namespace Selector",
          "description": "Namespace selector for ServiceMonitor resources"
        },
        "annotations": {
          "type": "object",
          "title": "Annotations",
          "description": "Annotations for the service monitor"
        },
        "labels": {
          "type": "object",
          "title": "Labels",
          "description": "Additional ServiceMonitor labels"
        },
        "interval": {
          "type": [
            "string",
            "null"
          ],
          "title": "Interval",
          "description": "ServiceMonitor scrape interval",
          "format": "duration"
        },
        "scrapeTimeout": {
          "type": [
            "string",
            "null"
          ],
          "title": "Scrape Timeout",
          "description": "ServiceMonitor scrape timeout in Go duration format (e.g. 15s)",
          "format": "duration"
        },
        "relabelings": {
          "type": "array",
          "title": "Relabelings",
          "description": "ServiceMonitor relabel configs to apply to samples before scraping"
        },
        "metricRelabelings": {
          "type": "array",
          "title": "Metric Relabelings",
          "description": "ServiceMonitor relabel configs to apply to samples as the last"
        },
        "targetLabels": {
          "type": "array",
          "title": "Target Labels",
          "description": "ServiceMonitor will add labels from the service to the Prometheus metric"
        },
        "scheme": {
          "type": "string",
          "title": "Scheme",
          "description": "ServiceMonitor will use http by default, but you can pick https as well",
          "default": "http"
        },
        "tlsConfig": {
          "type": [
            "object",
            "null"
          ],
          "title": "TLS Config"
        },
        "prometheusRule": {
          "type": "object",
          "title": "Prometheus Rule",
          "properties": {
            "enabled": {
              "type": "boolean",
              "title": "Enabled"
            },
            "additionalLabels": {
              "type": "object",
              "title": "Additional Labels"
            },
            "rules": {
              "type": "array",
              "title": "Rules"
            }
          }
        }
      }
    },
    "livenessProbe": {
      "$ref": "#/definitions/probe",
      "title": "Liveness Probe"
    },
    "readinessProbe": {
      "$ref": "#/definitions/probe",
      "title": "Readiness Probe"
    }
  },
  "definitions": {
    "probe": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "enabled": {
          "type": "boolean",
          "title": "Enabled",
          "description": "Enable the probe"
        },
        "initialDelaySeconds": {
          "type": "integer",
          "title": "Initial Delay Seconds",
          "description": "Number of seconds after the container has started before liveness or readiness probes are initiated"
        },
        "timeoutSeconds": {
          "type": "integer",
          "title": "Timeout Seconds",
          "description": "Number of seconds after which the probe times out"
        },
        "periodSeconds": {
          "type": "integer",
          "title": "Period Seconds",
          "description": "How often (in seconds) to perform the probe"
        },
        "successThreshold": {
          "type": "integer",
          "title": "Success Threshold",
          "description": "Minimum consecutive successes for the probe to be considered successful after having failed"
        },
        "failureThreshold": {
          "type": "integer",
          "title": "Failure Threshold",
          "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded"
        }
      }
    }
  }
}
