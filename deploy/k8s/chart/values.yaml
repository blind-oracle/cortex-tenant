# -- Application name override
nameOverride:
# -- Application fullname override
fullnameOverride:

image:
  # -- Repository to pull the image
  repository: ghcr.io/blind-oracle/cortex-tenant
  # -- Policy when pulling images
  pullPolicy: IfNotPresent
  # -- Overrides the image tag (default is `.Chart.appVersion`)
  tag: ""
  # -- Optionally specify an array of imagePullSecrets
  # Secrets must be manually created in the namespace.
  # ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  # pullSecrets:
  #   - myRegistryKeySecretName

service:
  # -- The type of service
  type: ClusterIP
  # -- The port on which the service listens for traffic
  port: 8080
  # -- The target port to which traffic is forwarded
  targetPort: 8080

# -- Number of replicas. Ignored if `autoscaling.enabled` is true
replicas: 2

autoscaling:
  # -- If enabled, HorizontalPodAutoscaler resources are created
  enabled: false
  # -- Min number of pod replica autoscaled
  minReplica: 1
  # -- Max number of pod replica autoscaled
  maxReplica: 3
  # -- Target memory utilization percentage for autoscaling
  targetMemoryUtilizationPercentage: 60
  # -- Target CPU utilization percentage for autoscaling
  targetCPUUtilizationPercentage: 60

# -- Additional environment variables
envs:
  []
  # - name: CT_LISTEN
  #   value:

config:
  # -- Where to listen for incoming write requests from Prometheus
  # (env: `CT_LISTEN`)
  listen: 0.0.0.0:8080
  # -- Profiling API, leave empty to disable
  # (env: `CT_LISTEN_PPROF`)
  listen_pprof: 0.0.0.0:7008
  # -- Where to send the modified requests (Cortex)
  # (env: `CT_TARGET`)
  target: http://cortex-distributor.cortex.svc:8080/api/v1/push
  # -- Whether to enable querying for IPv6 records
  # (env: `CT_ENABLE_IPV6`)
  enable_ipv6: false
  # -- Log level
  # (env: `CT_LOG_LEVEL`)
  log_level: warn
  # -- HTTP request timeout
  # (env: `CT_TIMEOUT`)
  timeout: 10s
  # -- Timeout to wait on shutdown to allow load balancers detect that we're going away.
  # During this period after the shutdown command the /alive endpoint will reply with HTTP 503.
  # Set to 0s to disable.
  # (env: `CT_TIMEOUT_SHUTDOWN`)
  timeout_shutdown: 10s
  # -- Max number of parallel incoming HTTP requests to handle
  # (env: `CT_CONCURRENCY`)
  concurrency: 1000
  # -- Whether to forward metrics metadata from Prometheus to Cortex
  # Since metadata requests have no timeseries in them - we cannot divide them into tenants
  # So the metadata requests will be sent to the default tenant only, if one is not defined - they will be dropped
  # (env: `CT_METADATA`)
  metadata: false
  # -- If true response codes from metrics backend will be logged to stdout. This setting can be used to suppress errors
  # which can be quite verbose like 400 code - out-of-order samples or 429 on hitting ingestion limits
  # Also, those are already reported by other services like Cortex/Mimir distributors and ingesters
  # (env: `CT_LOG_RESPONSE_ERRORS`)
  log_response_errors: true
  # -- Maximum duration to keep outgoing connections alive (to Cortex/Mimir)
  # Useful for resetting L4 load-balancer state
  # Use 0 to keep them indefinitely
  # (env: `CT_MAX_CONN_DURATION`)
  max_connection_duration: 0s
  # -- This parameter sets the limit for the count of outgoing concurrent connections to Cortex / Mimir.
  # By default it's 64 and if all of these connections are busy you will get errors when pushing from Prometheus.
  # If your `target` is a DNS name that resolves to several IPs then this will be a per-IP limit.
  # (env: `CT_MAX_CONNS_PER_HOST`)
  max_conns_per_host: 64

  # Authentication (optional)
  auth:
    # -- Egress HTTP basic auth -> add `Authentication` header to outgoing requests
    enabled: false
    # -- Username
    # (env: `CT_AUTH_EGRESS_USERNAME`)
    username:
    # -- Password
    # (env: `CT_AUTH_EGRESS_PASSWORD`)
    password:
    # -- Secret should pass the `CT_AUTH_EGRESS_USERNAME` and `CT_AUTH_EGRESS_PASSWORD` env variables
    existingSecret:

  tenant:
    # -- Which label to look for the tenant information
    # (env: `CT_TENANT_LABEL`)
    label: tenant
    # -- List of labels examined for tenant information. If set takes precedent over `label`
    # (env: `CT_TENANT_LABEL_LIST`)
    label_list: []
    # -- Optional hard-coded prefix with delimeter for all tenant values.
    # Delimeters allowed for use:
    # https://grafana.com/docs/mimir/latest/configure/about-tenant-ids/
    # (env: `CT_TENANT_PREFIX`)
    prefix: ""
    # -- If true will use the tenant ID of the inbound request as the prefix of the new tenant id.
    # Will be automatically suffixed with a `-` character.
    # Example:
    #   Prometheus forwards metrics with `X-Scope-OrgID: Prom-A` set in the inbound request.
    #   This would result in the tenant prefix being set to `Prom-A-`.
    # (env: `CT_TENANT_PREFIX_PREFER_SOURCE`)
    prefix_prefer_source: false
    # -- Whether to remove the tenant label from the request
    # (env: `CT_TENANT_LABEL_REMOVE`)
    label_remove: false
    # -- To which header to add the tenant ID
    # (env: `CT_TENANT_HEADER`)
    header: X-Scope-OrgID
    # -- Which tenant ID to use if the label is missing in any of the timeseries
    # If this is not set or empty then the write request with missing tenant label
    # will be rejected with HTTP code 400
    # (env: `CT_TENANT_DEFAULT`)
    default: cortex-tenant-default
    # -- Enable if you want all metrics from Prometheus to be accepted with a 204 HTTP code
    # regardless of the response from Cortex. This can lose metrics if Cortex is
    # throwing rejections.
    # (env: `CT_TENANT_ACCEPT_ALL`)
    accept_all: false

resources:
  # -- Resources limits
  limits:
    # cpu: 100m
    memory: 256Mi
  # -- Resources requests
  requests:
    cpu: 100m
    memory: 128Mi

livenessProbe:
  # -- Enable the liveness probe
  enabled: false
  # -- Initial delay seconds
  initialDelaySeconds: 5
  # -- Liveness probe period
  periodSeconds: 20
  # -- Liveness probe timeout
  timeoutSeconds: 5
  # -- Liveness probe success threshold
  successThreshold: 1
  # -- Liveness probe failure threshold
  failureThreshold: 3

readinessProbe:
  # -- Enable the readiness probe
  enabled: false
  # -- Initial delay seconds
  initialDelaySeconds: 10
  # -- Readiness probe period
  periodSeconds: 10
  # -- Readiness probe timeout
  timeoutSeconds: 5
  # -- Readiness probe success threshold
  successThreshold: 1
  # -- Readiness probe failure threshold
  failureThreshold: 3

podDisruptionBudget:
  # -- If enabled, PodDisruptionBudget resources are created
  enabled: true
  # -- Minimum number of pods that must remain scheduled
  minAvailable: 1

# -- Annotations for deployment
annotations: {}

# -- Annotations for pods
podAnnotations: {}

# -- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context)
podSecurityContext: {}

# -- [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context)
securityContext: {}

# -- [Priority Class](https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/#priorityclass)
priorityClassName: ""

# -- [Node Selection](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node)
nodeSelector: {}

# -- [Taints and Tolerations](https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/)
tolerations: []

# -- [Affinity and anti-affinity](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity)
affinity: {}

# -- [Pod Topology Spread Constraints](https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/)
podTopologySpreadConstraints: []

# ServiceMonitor configuration
serviceMonitor:
  # -- If enabled, ServiceMonitor resources for Prometheus Operator are created
  enabled: false
  # -- Alternative namespace for ServiceMonitor resources
  namespace: null
  # -- ServiceMonitor targetPort
  targetPort: 9090
  # -- Namespace selector for ServiceMonitor resources
  namespaceSelector: {}
  # -- ServiceMonitor annotations
  annotations: {}
  # -- Additional ServiceMonitor labels
  labels: {}
  # -- ServiceMonitor scrape interval
  interval: null
  # -- ServiceMonitor scrape timeout in Go duration format (e.g. 15s)
  scrapeTimeout: null
  # -- ServiceMonitor relabel configs to apply to samples before scraping
  # https://github.com/prometheus-operator/prometheus-operator/blob/master/Documentation/api.md#relabelconfig
  # (defines `relabel_configs`)
  relabelings: []
  # -- ServiceMonitor relabel configs to apply to samples as the last
  # step before ingestion
  # https://github.com/prometheus-operator/prometheus-operator/blob/master/Documentation/api.md#relabelconfig
  # (defines `metric_relabel_configs`)
  metricRelabelings: []
  # -- ServiceMonitor will add labels from the service to the Prometheus metric
  # https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/api.md#servicemonitorspec
  targetLabels: []
  # -- ServiceMonitor will use http by default, but you can pick https as well
  scheme: http
  # -- ServiceMonitor will use these tlsConfig settings to make the health check requests
  tlsConfig: null
  # -- Prometheus rules will be deployed for alerting purposes
  prometheusRule:
    enabled: false
    additionalLabels: {}
    # namespace:
    rules: []

# -- Optionally specify an custom ca if cortex endpoint is running in a private environment with a self signed ca
# customCA: {}
#   secretName: ca-bundle
#   subPath: ca.crt

